import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import styles from './UserContent.module.scss';
import { useApi } from '../../hooks/useApi';
import type { Content } from '../../types/api';
import { finalUser as telegramUser, showBackButton, hideBackButton } from '../../shared/lib/telegram';
import { Loading } from '../Loading/Loading';
import { Button } from '../Button/Button';

const UserContent: React.FC = () => {
  const [content, setContent] = useState<Content[]>([]);
  const [userRole, setUserRole] = useState<string>('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const api = useApi();
  const navigate = useNavigate();

  useEffect(() => {
    fetchUserContent();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—É–±–ª–∏–∫—É–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
    const checkAndPublishOverduePosts = async () => {
      try {
        const result = await api.post<{ message: string; published: number; posts: Content[] }>('/admin/content/auto-publish', {}, {
          'x-telegram-id': telegramUser?.id?.toString() || '',
        });

        if (result.data && result.data.published > 0) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          setContent(prev => {
            const updatedContent = [...prev];
            result.data!.posts.forEach(publishedPost => {
              const index = updatedContent.findIndex(item => item.id === publishedPost.id);
              if (index !== -1) {
                updatedContent[index] = publishedPost;
              }
            });
            return updatedContent;
          });
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Å—Ç–æ–≤:', err);
      }
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    checkAndPublishOverduePosts();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å—é –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
    const interval = setInterval(checkAndPublishOverduePosts, 30 * 60 * 1000);
    
    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    showBackButton(() => {
      navigate('/');
      hideBackButton();
    });
    
    return () => {
      hideBackButton();
    };
  }, [navigate]);

  const fetchUserContent = async () => {
    try {
      setLoading(true);
      setError(null);

      if (!telegramUser?.id) {
        setError('Telegram user ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
        setLoading(false);
        return;
      }

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
      const result = await api.get<{ content: Content[], userRole: string }>(`/user/content/${telegramUser.id}?status=published`, {
        'x-telegram-id': telegramUser.id.toString(),
      });

      if (result.error) {
        setError(result.error);
      } else if (result.data) {
        setContent(result.data.content || []);
        setUserRole(result.data.userRole || '');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', err);
      setError(err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    } finally {
      setLoading(false);
    }
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const day = date.getDate();
    const monthIndex = date.getMonth();
    
    // –ú–∞—Å—Å–∏–≤ –º–µ—Å—è—Ü–µ–≤ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ (–¥–ª—è "17 –∞–≤–≥—É—Å—Ç–∞")
    const monthsGenitive = [
      '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
      '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
    ];
    
    const month = monthsGenitive[monthIndex];
    
    return `${day} ${month}`;
  };

  if (loading) {
    return (
      <div className={styles.userContent}>
        <Loading />
      </div>
    );
  }

  if (error) {
    return (
      <div className={styles.userContent}>
        <div className={styles.error}>
          <h2>–û—à–∏–±–∫–∞</h2>
          <p>{error}</p>
          <Button onClick={fetchUserContent} style={styles.retryButton}>
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </Button>
        </div>
      </div>
    );
  }

  if (!userRole) {
    return (
      <div className={styles.userContent}>
        <div className={styles.noRole}>
          <h2>üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</h2>
          <p>–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π —Ä–æ–ª–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.</p>
          <p>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.</p>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.userContent}>
      <div className={styles.header}>
        <h1>–û–ë–£–ß–ï–ù–ò–ï</h1>
        <div className={styles.roleInfo}>
          <span className={styles.roleName}>{userRole}</span>
        </div>
      </div>

      {content.length === 0 ? (
        <div className={styles.emptyState}>
          <h3>–ù–∏—á–µ–≥–æ –Ω–µ—Ç</h3>
        </div>
      ) : (
        <div className={styles.contentGrid}>
          {content
            .filter(item => {
              // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ frontend –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
              // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ backend
              
              // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Å—Ç–∞—Ä—ã–µ –ø–æ—Å—Ç—ã), —Å—á–∏—Ç–∞–µ–º –∏—Ö –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º–∏
              if (!item.status) return true;
              
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
              if (item.status === 'published') return true;
              
              // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
              return false;
            })
            .map((item) => (
            <article key={item.id} className={styles.contentCard}>
              <div className={styles.cardHeader}>
                <h2 className={styles.contentTitle}>{item.title}</h2>
                <time className={styles.contentDate}>
                  {formatDate(item.created_at)}
                </time>
              </div>
              
              {item.description && (
                <div className={styles.contentDescription}>
                  <p>{item.description}</p>
                </div>
              )}
              
              <div className={styles.contentLinks}>
                {item.links && item.links.length > 0 ? (
                  // –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –º–∞—Å—Å–∏–≤–æ–º links
                  (() => {
                    const articles = item.links.filter(link => link.link_type === 'article');
                    const streams = item.links.filter(link => link.link_type === 'stream');
                    
                    return (
                      <>
                        {/* –°—Ç–∞—Ç—å–∏ */}
                        {articles.map((link) => (
                          <div key={link.id} className={styles.linkContainer}>
                            <div className={styles.linkType}>
                              –°–¢–ê–¢–¨–Ø
                            </div>
                            <Button 
                              href={link.link_url} 
                              target="_blank" 
                              style={`${styles.link} ${styles[link.link_type]}`}
                            >
                              <span className={styles.linkText}>
                                {link.link_title}
                              </span>
                              <span className={styles.linkArrow}>‚Üí</span>
                            </Button>
                          </div>
                        ))}
                        
                        {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Å—Ç–∞—Ç—å—è–º–∏ –∏ —ç—Ñ–∏—Ä–∞–º–∏ */}
                        {articles.length > 0 && streams.length > 0 && (
                          <div className={styles.divider}></div>
                        )}
                        
                        {/* –≠—Ñ–∏—Ä—ã */}
                        {streams.map((link) => (
                          <div key={link.id} className={styles.linkContainer}>
                            <div className={styles.linkType}>
                              –ó–∞–ø–∏—Å—å
                            </div>
                            <Button 
                              href={link.link_url} 
                              target="_blank" 
                              style={`${styles.link} ${styles[link.link_type]}`}
                            >
                              <span className={styles.linkText}>
                                {link.link_title}
                              </span>
                              <span className={styles.linkArrow}>‚Üí</span>
                            </Button>
                          </div>
                        ))}
                      </>
                    );
                  })()
                ) : (
                  // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤
                  <>
                    {item.article_link && (
                      <div className={styles.linkContainer}>
                        <div className={styles.linkType}>–°–¢–ê–¢–¨–Ø</div>
                        <Button 
                          href={item.article_link} 
                          target="_blank" 
                          style={`${styles.link} ${styles.articleLink}`}
                        >
                          <span className={styles.linkText}>–ß–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é</span>
                          <span className={styles.linkArrow}>‚Üí</span>
                        </Button>
                      </div>
                    )}
                    
                    {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Å—Ç–∞—Ç—å—è–º–∏ –∏ —ç—Ñ–∏—Ä–∞–º–∏ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤ */}
                    {item.article_link && item.stream_link && (
                      <div className={styles.divider}></div>
                    )}
                    
                    {item.stream_link && (
                      <div className={styles.linkContainer}>
                        <div className={styles.linkType}>–ó–∞–ø–∏—Å—å –∑–∞–Ω—è—Ç–∏—è</div>
                        <Button 
                          href={item.stream_link} 
                          target="_blank" 
                          style={`${styles.link} ${styles.streamLink}`}
                        >
                          <span className={styles.linkText}>–°–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å—å –∑–∞–Ω—è—Ç–∏—è</span>
                          <span className={styles.linkArrow}>‚Üí</span>
                        </Button>
                      </div>
                    )}
                  </>
                )}
              </div>
              
              {item.updated_at !== item.created_at && (
                <div className={styles.updateInfo}>
                  <span>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {formatDate(item.updated_at)}</span>
                </div>
              )}
            </article>
          ))}
        </div>
      )}

      <div className={styles.footer}>
        <p>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ. –ó–∞—Ö–æ–¥–∏—Ç–µ –ø–æ—á–∞—â–µ! üòä</p>
      </div>
    </div>
  );
};

export default UserContent;
