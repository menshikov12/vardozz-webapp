import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import styles from './Admin.module.scss';
import { useAdminCheck } from '../../hooks/useAdminCheck';
import { showBackButton, hideBackButton } from '../../shared/lib/telegram';
import { Loading } from '../Loading/Loading';
import { Button } from '../Button/Button';
import { UserActivityStats } from './UserActivityStats';
import { useAdminUsers } from '../../hooks/useAdminUsers';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
const formatDateTime = (dateString: string | null | undefined): string => {
  if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

  try {
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞';

    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffMinutes = Math.floor(diffMs / (1000 * 60));

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    const dateStr = date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
    const timeStr = date.toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit'
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    let relativeTime = '';
    if (diffMinutes < 1) {
      relativeTime = '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    } else if (diffMinutes < 60) {
      relativeTime = `${diffMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    } else if (diffHours < 24) {
      relativeTime = `${diffHours} —á –Ω–∞–∑–∞–¥`;
    } else if (diffDays < 7) {
      relativeTime = `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
    } else if (diffDays < 30) {
      const weeks = Math.floor(diffDays / 7);
      relativeTime = `${weeks} –Ω–µ–¥ –Ω–∞–∑–∞–¥`;
    } else if (diffDays < 365) {
      const months = Math.floor(diffDays / 30);
      relativeTime = `${months} –º–µ—Å –Ω–∞–∑–∞–¥`;
    } else {
      const years = Math.floor(diffDays / 365);
      relativeTime = `${years} –≥ –Ω–∞–∑–∞–¥`;
    }

    return `${dateStr} ${timeStr} (${relativeTime})`;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:', error);
    return '–û—à–∏–±–∫–∞ –¥–∞—Ç—ã';
  }
};


const Admin: React.FC = () => {
  const [selectedUserId, setSelectedUserId] = useState<string | null>(null);
  const { isAdmin, loading } = useAdminCheck();
  const {
    users,
    roles,
    loading: usersLoading,
    initialLoading,
    loadingMore,
    error,
    accessDenied,
    successMessage,
    roleUpdateLoading,
    hasMore,
    totalUsers,
    fetchUsers,
    fetchRoles,
    updateUserRole,
    refreshUsers,
    loadMoreUsers
  } = useAdminUsers();
  const navigate = useNavigate();





  useEffect(() => {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if (!loading && isAdmin) {
      fetchUsers(true);
      fetchRoles();
    }
  }, [loading, isAdmin]); // –£–±–∏—Ä–∞–µ–º fetchUsers –∏ fetchRoles –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π






  useEffect(() => {
    showBackButton(() => {
      navigate('/admin');
      hideBackButton();
    });

    return () => {
      hideBackButton();
    };
  }, [navigate]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  useEffect(() => {
    const handleScroll = () => {
      const scrollTop = document.documentElement.scrollTop;
      const windowHeight = window.innerHeight;
      const documentHeight = document.documentElement.offsetHeight;
      const distanceFromBottom = documentHeight - (scrollTop + windowHeight);
      
      if (distanceFromBottom <= 1000) { // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞ 1000px –¥–æ –∫–æ–Ω—Ü–∞
        if (hasMore && !loadingMore && !initialLoading) {
          loadMoreUsers();
        }
      }
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [hasMore, loadingMore, initialLoading, loadMoreUsers]);

  const handleRoleUpdate = async (userId: string, newRoleId: string) => {
    await updateUserRole(userId, newRoleId);
    setSelectedUserId(null);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const handleRefresh = () => {
    refreshUsers();
  };

  if (loading || initialLoading) {
    return (
      <div className={styles.admin}>
        <Loading />
      </div>
    );
  }

  if (accessDenied) {
    return (
      <div className={styles.admin}>
        <div className={styles.accessDenied}>
          <h2>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h2>
          <p>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.</p>
          <p>–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É.</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className={styles.admin}>
        <div className={styles.error}>
          <h2>–û—à–∏–±–∫–∞</h2>
          <p>{error}</p>
          <button onClick={handleRefresh} className={styles.retryButton}>
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.admin}>
      <div className={styles.header}>
        <div className={styles.headerTitle}>
          <h1>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h1>
        </div>
        <div className={styles.headerActions}>
          <Button
            onClick={handleRefresh}
            disabled={usersLoading}
            style={{
              background: 'linear-gradient(135deg, #007bff 0%, #0056b3 100%)',
              color: 'white',
              border: 'none',
              padding: '0.75rem 1.5rem',
              borderRadius: '12px',
              fontSize: '14px',
              fontWeight: '600',
              minWidth: '150px',
              opacity: usersLoading ? 0.6 : 1,
              cursor: usersLoading ? 'not-allowed' : 'pointer'
            }}
          >
            {usersLoading ? 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫'}
          </Button>
        </div>
      </div>

      {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
      <UserActivityStats />

      {successMessage && (
        <div className={styles.successMessage}>
          <p>{successMessage}</p>
        </div>
      )}



      <div className={styles.usersList}>
        {users.length === 0 && !initialLoading ? (
          <div className={styles.emptyState}>
            <p>üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
          </div>
        ) : (
          <>
            <div className={styles.usersGrid}>
              {users.map((user, index) => (
                <div
                  key={user.id}
                  className={`${styles.userCard} ${styles.fadeInCard}`}
                  style={{
                    animationDelay: `${(index % 5) * 0.08}s`
                  }}
                >
                  <div className={styles.userInfo}>
                    <div className={styles.userAvatar}>
                      {user.first_name?.charAt(0)?.toUpperCase() || 'üë§'}{user.last_name?.charAt(0)?.toUpperCase() || ''}
                    </div>
                    <h3 className={styles.userName}>
                      {user.first_name} {user.last_name}
                    </h3>
                    <div className={styles.userDetails}>
                      <div className={styles.userField}>
                        <span className={styles.fieldLabel}>@</span>
                        <span>{user.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                      </div>
                      <div className={`${styles.userField} ${styles.roleField}`}>
                        <span className={styles.fieldLabel}>–†–æ–ª—å:</span>
                        <span className={user.role && user.role.trim() !== '' ? styles.roleActive : styles.roleEmpty}>
                          {user.role && user.role.trim() !== '' ? user.role : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
                        </span>
                      </div>
                      <div className={`${styles.userField} ${styles.dateFieldContainer}`}>
                        <span className={`${styles.fieldLabel} ${styles.firstLoginLabel}`}>üö™ –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥:</span>
                        <span className={styles.dateField}>
                          {formatDateTime(user.first_login_at)}
                        </span>
                      </div>
                      <div className={`${styles.userField} ${styles.dateFieldContainer}`}>
                        <span className={`${styles.fieldLabel} ${styles.lastLoginLabel}`}>üëã –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:</span>
                        <span className={styles.dateField}>
                          {formatDateTime(user.last_login_at)}
                        </span>
                      </div>
                    </div>

                    <div className={styles.userActions}>
                      {selectedUserId === user.id ? (
                        <div className={styles.roleSelector}>
                          <select
                            onChange={(e) => handleRoleUpdate(user.id, e.target.value)}
                            disabled={roleUpdateLoading === user.id}
                            className={styles.roleSelect}
                            defaultValue={user.role_id || ""}
                          >
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å...</option>
                            <option value="">–£–±—Ä–∞—Ç—å —Ä–æ–ª—å</option>
                            {roles.map(role => (
                              <option key={role.id} value={role.id}>
                                {role.name}
                              </option>
                            ))}
                          </select>
                          <Button
                            onClick={() => setSelectedUserId(null)}
                            style={styles.cancelButton}
                            disabled={roleUpdateLoading === user.id}
                          >
                            –û—Ç–º–µ–Ω–∞
                          </Button>
                        </div>
                      ) : (
                        <Button
                          onClick={() => setSelectedUserId(user.id)}
                          style={styles.editRoleButton}
                          disabled={roleUpdateLoading === user.id}
                        >
                          {roleUpdateLoading === user.id ? (
                            <>
                              <span className={styles.spinner}></span>
                              –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...
                            </>
                          ) : (
                            '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å'
                          )}
                        </Button>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
            {loadingMore && (
              <div className={styles.loadingMore}>
                <div className={styles.spinner}></div>
                <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –µ—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</p>
              </div>
            )}

            {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
            {hasMore && (
              <div style={{ textAlign: 'center', margin: '2rem 0' }}>
                <button 
                  onClick={() => loadMoreUsers()} 
                  disabled={loadingMore}
                  style={{ 
                    padding: '0.75rem 1.5rem', 
                    background: 'linear-gradient(135deg, #28a745 0%, #20c997 100%)', 
                    color: 'white', 
                    border: 'none', 
                    borderRadius: '12px',
                    fontSize: '14px',
                    fontWeight: '600',
                    cursor: loadingMore ? 'not-allowed' : 'pointer',
                    opacity: loadingMore ? 0.6 : 1
                  }}
                >
                  {loadingMore ? '‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...' : 'üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'}
                </button>
              </div>
            )}

            {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã */}
            {!hasMore && users.length > 0 && (
              <div className={styles.allLoaded}>
                <p>‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ({users.length} –∏–∑ {totalUsers})</p>
              </div>
            )}

          </>
        )}
      </div>
    </div>
  );
};

export default Admin;
