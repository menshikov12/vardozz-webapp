import React, { useState, useEffect } from 'react';
import styles from './UserActivityStats.module.scss';
import { useApi } from '../../hooks/useApi';
import { finalUser as telegramUser } from '../../shared/lib/telegram';

interface ActivityStats {
  total_users: number;
  users_with_first_login: number;
  active_today: number;
  active_week: number;
  active_month: number;
  inactive_users: number;
  never_logged_in: number;
}

interface UserActivityStatsProps {
  // –£–±–∏—Ä–∞–µ–º onRefresh prop, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤—ã–∑—ã–≤–∞–ª –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É
}

export const UserActivityStats: React.FC<UserActivityStatsProps> = () => {
  const [stats, setStats] = useState<ActivityStats | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const api = useApi();

  const fetchStats = async () => {
    try {
      setLoading(true);
      setError(null);

      if (!telegramUser?.id) {
        setError('Telegram user ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const result = await api.get<{ stats: ActivityStats }>('/admin/users/activity-stats', {
        'x-telegram-id': telegramUser.id.toString(),
      });

      if (result.error) {
        setError(result.error);
      } else if (result.data) {
        setStats(result.data.stats);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
      setError(err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchStats();
  }, []);

  const calculatePercentage = (value: number, total: number): number => {
    return total > 0 ? Math.round((value / total) * 100) : 0;
  };

  if (loading) {
    return (
      <div className={styles.statsContainer}>
        <div className={styles.loading}>
          <div className={styles.spinner}></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className={styles.statsContainer}>
        <div className={styles.error}>
          <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</h3>
          <p>{error}</p>
          <button onClick={fetchStats} className={styles.retryButton}>
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  if (!stats) {
    return null;
  }

  const totalUsers = stats.total_users;

  return (
    <div className={styles.statsContainer}>
      <h2 className={styles.title}>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h2>
      
      <div className={styles.statsGrid}>
        <div className={`${styles.statCard} ${styles.totalCard}`}>
          <div className={styles.statIcon}>üë•</div>
          <div className={styles.statContent}>
            <div className={styles.statNumber}>{totalUsers}</div>
            <div className={styles.statLabel}>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
          </div>
        </div>

        <div className={`${styles.statCard} ${styles.activeCard}`}>
          <div className={styles.statIcon}>üü¢</div>
          <div className={styles.statContent}>
            <div className={styles.statNumber}>{stats.active_today}</div>
            <div className={styles.statLabel}>–ê–∫—Ç–∏–≤–Ω—ã —Å–µ–≥–æ–¥–Ω—è</div>
            <div className={styles.statPercentage}>
              {calculatePercentage(stats.active_today, totalUsers)}%
            </div>
          </div>
        </div>

        <div className={`${styles.statCard} ${styles.weekCard}`}>
          <div className={styles.statIcon}>üìÖ</div>
          <div className={styles.statContent}>
            <div className={styles.statNumber}>{stats.active_week}</div>
            <div className={styles.statLabel}>–ê–∫—Ç–∏–≤–Ω—ã –∑–∞ –Ω–µ–¥–µ–ª—é</div>
            <div className={styles.statPercentage}>
              {calculatePercentage(stats.active_week, totalUsers)}%
            </div>
          </div>
        </div>

        <div className={`${styles.statCard} ${styles.monthCard}`}>
          <div className={styles.statIcon}>üìÜ</div>
          <div className={styles.statContent}>
            <div className={styles.statNumber}>{stats.active_month}</div>
            <div className={styles.statLabel}>–ê–∫—Ç–∏–≤–Ω—ã –∑–∞ –º–µ—Å—è—Ü</div>
            <div className={styles.statPercentage}>
              {calculatePercentage(stats.active_month, totalUsers)}%
            </div>
          </div>
        </div>

        <div className={`${styles.statCard} ${styles.inactiveCard}`}>
          <div className={styles.statIcon}>üò¥</div>
          <div className={styles.statContent}>
            <div className={styles.statNumber}>{stats.inactive_users}</div>
            <div className={styles.statLabel}>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã &gt;30 –¥–Ω–µ–π</div>
            <div className={styles.statPercentage}>
              {calculatePercentage(stats.inactive_users, totalUsers)}%
            </div>
          </div>
        </div>

        <div className={`${styles.statCard} ${styles.neverCard}`}>
          <div className={styles.statIcon}>‚ùì</div>
          <div className={styles.statContent}>
            <div className={styles.statNumber}>{stats.never_logged_in}</div>
            <div className={styles.statLabel}>–ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏—Å—å</div>
            <div className={styles.statSubLabel}>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</div>
            <div className={styles.statPercentage}>
              {calculatePercentage(stats.never_logged_in, totalUsers)}%
            </div>
          </div>
        </div>
      </div>

      <div className={styles.refreshInfo}>
        <p>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {new Date().toLocaleString('ru-RU')}</p>
        <button onClick={fetchStats} className={styles.refreshButton}>
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        </button>
      </div>
    </div>
  );
};