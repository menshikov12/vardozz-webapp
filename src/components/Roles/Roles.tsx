import React, { useState, useEffect } from 'react';
import styles from './Roles.module.scss';
import { useApi } from '../../hooks/useApi';
import { useAdminCheck } from '../../hooks/useAdminCheck';
import { useTelegramBackButton } from '../../hooks/useTelegramBackButton';
import type { Role, CreateRoleRequest } from '../../types/api';
import { finalUser as telegramUser } from '../../shared/lib/telegram';
import { Loading } from '../Loading/Loading';
import { Button } from '../Button/Button';

const Roles: React.FC = () => {
  const [roles, setRoles] = useState<Role[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [accessDenied, setAccessDenied] = useState(false);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [createLoading, setCreateLoading] = useState(false);
  const [newRole, setNewRole] = useState<CreateRoleRequest>({
    name: '',
    description: '',
    color: '#28a745'
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
  const [rolesLoading, setRolesLoading] = useState(false);

  const api = useApi();
  const { isAdmin, loading } = useAdminCheck();



  useEffect(() => {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if (!loading && isAdmin) {
      fetchAllRoles();
    }
  }, [loading, isAdmin]);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –∫–Ω–æ–ø–∫–æ–π "–Ω–∞–∑–∞–¥"
  useTelegramBackButton('/admin');


  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ä–æ–ª–µ–π
  const fetchAllRoles = async () => {
    try {
      setRolesLoading(true);
      setError(null);
      setAccessDenied(false);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
      if (!isAdmin) {
        setAccessDenied(true);
        setRolesLoading(false);
        return;
      }

      if (!telegramUser?.id) {
        setError('Telegram user ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
        setRolesLoading(false);
        return;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ä–æ–ª–∏ —Å—Ä–∞–∑—É (–±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
      const endpoint = `/admin/roles?limit=1000&offset=0`; // –ë–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
      const result = await api.get<{ roles: Role[], total: number }>(endpoint, {
        'x-telegram-id': telegramUser.id.toString(),
      });

      if (result.error) {
        if (result.error.includes('Access denied') || result.error.includes('403')) {
          setAccessDenied(true);
        } else {
          setError(result.error);
        }
      } else if (result.data) {
        const allRoles = result.data.roles || [];
        setRoles(allRoles);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    } finally {
      setRolesLoading(false);
    }
  };


  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π
  const refreshRoles = async () => {
    setRoles([]);
    await fetchAllRoles();
  };

  const handleCreateRole = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!newRole.name.trim()) {
      setError('–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
      return;
    }

    try {
      setCreateLoading(true);
      setError(null);

      const result = await api.post<{ role: Role }>('/admin/roles', newRole, {
        'x-telegram-id': telegramUser?.id?.toString() || '',
      });

      if (result.error) {
        setError(result.error);
      } else if (result.data) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞
        setRoles(prev => {
          const existingIds = new Set(prev.map(role => role.id));
          if (existingIds.has(result.data!.role.id)) {
            return prev;
          }
          return [...prev, result.data!.role];
        });
        setNewRole({ name: '', description: '', color: '#28a745' });
        setShowCreateForm(false);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π
        await fetchAllRoles();
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    } finally {
      setCreateLoading(false);
    }
  };

  const handleDeleteRole = async (roleId: string) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ä–æ–ª—å?')) {
      return;
    }

    try {
      setError(null);
      
      const result = await api.delete(`/admin/roles/${roleId}`, {
        'x-telegram-id': telegramUser?.id?.toString() || '',
      });

      if (result.error) {
        setError(result.error);
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π
        await fetchAllRoles();
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  };



  if (loading || rolesLoading) {
    return (
      <div className={styles.roles}>
        <Loading />
      </div>
    );
  }

  if (accessDenied) {
    return (
      <div className={styles.roles}>
        <div className={styles.accessDenied}>
          <h2>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h2>
          <p>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏.</p>
        </div>
      </div>
      );
    }

  if (error) {
    return (
      <div className={styles.roles}>
        <div className={styles.error}>
          <h2>–û—à–∏–±–∫–∞</h2>
          <p>{error}</p>
          <Button 
            onClick={refreshRoles}
            style={{
              background: 'linear-gradient(135deg, #dc3545 0%, #c82333 100%)',
              color: 'white',
              border: 'none',
              padding: '0.75rem 1.5rem',
              borderRadius: '12px',
              fontSize: '14px',
              fontWeight: '600',
              marginTop: '1rem'
            }}
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.roles}>
      <div className={styles.header}>
        <h1>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏</h1>
        <Button 
          onClick={() => setShowCreateForm(!showCreateForm)}
          style={{
            background: showCreateForm 
              ? 'linear-gradient(135deg, #dc3545 0%, #c82333 100%)' 
              : 'linear-gradient(135deg, #28a745 0%, #20c997 100%)',
            color: 'white',
            border: 'none',
            padding: '0.75rem 1.5rem',
            borderRadius: '12px',
            fontSize: '14px',
            fontWeight: '600',
            minWidth: '150px',
            boxShadow: showCreateForm 
              ? '0 4px 12px rgba(220, 53, 69, 0.3)'
              : '0 4px 12px rgba(40, 167, 69, 0.3)'
          }}
        >
          {showCreateForm ? '–û—Ç–º–µ–Ω–∞' : '+ –°–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å'}
        </Button>
      </div>

      {showCreateForm && (
        <div className={styles.createForm}>
          <h3>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–æ–ª—å</h3>
          <form onSubmit={handleCreateRole}>
            <div className={styles.formGroup}>
              <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ *</label>
              <input
                type="text"
                value={newRole.name}
                onChange={(e) => setNewRole(prev => ({ ...prev, name: e.target.value }))}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: moderator"
                required
              />
            </div>
            
            <div className={styles.formGroup}>
              <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
              <textarea
                value={newRole.description}
                onChange={(e) => setNewRole(prev => ({ ...prev, description: e.target.value }))}
                placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏..."
                rows={3}
              />
            </div>
            
            <div className={styles.formGroup}>
              <label>–¶–≤–µ—Ç</label>
              <div className={styles.colorPicker}>
                {[
                  { color: '#28a745', name: '–ó–µ–ª–µ–Ω—ã–π' },
                  { color: '#007bff', name: '–°–∏–Ω–∏–π' },
                  { color: '#dc3545', name: '–ö—Ä–∞—Å–Ω—ã–π' },
                  { color: '#ffc107', name: '–ñ–µ–ª—Ç—ã–π' },
                  { color: '#6f42c1', name: '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π' },
                  { color: '#fd7e14', name: '–û—Ä–∞–Ω–∂–µ–≤—ã–π' },
                  { color: '#20c997', name: '–ë–∏—Ä—é–∑–æ–≤—ã–π' },
                  { color: '#e83e8c', name: '–†–æ–∑–æ–≤—ã–π' }
                ].map((colorOption) => (
                  <div
                    key={colorOption.color}
                    className={`${styles.colorOption} ${newRole.color === colorOption.color ? styles.colorOptionSelected : ''}`}
                    style={{ backgroundColor: colorOption.color }}
                    onClick={() => setNewRole(prev => ({ ...prev, color: colorOption.color }))}
                    title={colorOption.name}
                  />
                ))}
              </div>
            </div>
            
            <div className={styles.formActions}>
              <Button 
                type="submit" 
                disabled={createLoading}
                style={{
                  padding: '0.75rem 1.5rem',
                  borderRadius: '12px',
                  fontSize: '14px',
                  fontWeight: '600',
                  minWidth: '150px',
                  opacity: createLoading ? 0.6 : 1,
                  cursor: createLoading ? 'not-allowed' : 'pointer'
                }}
              >
                {createLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å'}
              </Button>
            </div>
          </form>
        </div>
      )}



      <div className={styles.rolesList}>
        {roles.length === 0 && !rolesLoading ? (
          <div className={styles.emptyState}>
            <p>üìã –†–æ–ª–µ–π –Ω–µ—Ç</p>
          </div>
        ) : (
          <div className={styles.rolesGrid}>
            {roles.map((role) => (
              <div key={role.id} className={styles.roleCard}>
                <div className={styles.roleHeader}>
                  <div 
                    className={styles.roleColor}
                    style={{ backgroundColor: role.color }}
                  />
                  <h3 className={styles.roleName}>{role.name}</h3>
                  <Button 
                    onClick={() => handleDeleteRole(role.id)}
                    style={{
                      background: 'rgba(220, 53, 69, 0.1)',
                      color: '#dc3545',
                      border: '1px solid rgba(220, 53, 69, 0.3)',
                      width: '30px',
                      height: '30px',
                      borderRadius: '50%',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '12px',
                      minWidth: 'auto',
                      padding: '0'
                    }}
                  >
                    ‚úñ
                  </Button>
                </div>
                
                {role.description && (
                  <p className={styles.roleDescription}>{role.description}</p>
                )}
                
                <div className={styles.roleInfo}>
                  <span className={styles.roleDate}>
                    –°–æ–∑–¥–∞–Ω–∞: {new Date(role.created_at).toLocaleDateString('ru-RU')}
                  </span>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default Roles;
