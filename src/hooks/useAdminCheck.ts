import { useMemo, useState, useEffect } from 'react';
import { finalUser as telegramUser } from '../shared/lib/telegram';
import { useApi } from './useApi';
import { userRoleCache } from '../shared/lib/userRoleCache';

export const useAdminCheck = () => {
  const [dbRole, setDbRole] = useState<string>('');
  const [loading, setLoading] = useState(true);
  const api = useApi();

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö Telegram ID (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  const ADMIN_TELEGRAM_IDS = [748516935, 1750233627];

  const isAdmin = useMemo(() => {
    if (!telegramUser?.id) {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –ø–æ Telegram ID
    const userId = telegramUser.id;
    const isUserAdmin = ADMIN_TELEGRAM_IDS.includes(userId) || 
                       ADMIN_TELEGRAM_IDS.includes(Number(userId)) ||
                       ADMIN_TELEGRAM_IDS.includes(parseInt(String(userId)));
    
    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    const hasAdminRole = dbRole === 'ADMIN' || dbRole === 'admin';
    
    console.log('üîç Admin check:', {
      userId,
      isUserAdmin,
      dbRole,
      hasAdminRole,
      finalResult: isUserAdmin || hasAdminRole
    });
    
    return isUserAdmin || hasAdminRole;
  }, [dbRole]);

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É
  const hasContentAccess = useMemo(() => {
    if (!telegramUser?.id) {
      return false;
    }
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –ª—é–±–∞—è —Ä–æ–ª—å –ò–õ–ò —Ä–æ–ª—å ADMIN
    return dbRole && dbRole.trim() !== '' || dbRole === 'ADMIN' || dbRole === 'admin';
  }, [dbRole]);

  useEffect(() => {
    const fetchUserRole = async () => {
      try {
        if (!telegramUser?.id) {
          setLoading(false);
          return;
        }

        const telegramId = String(telegramUser.id);
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        const cachedRole = userRoleCache.getRole(telegramId);
        if (cachedRole !== null) {
          console.log('‚úÖ Role loaded from cache:', cachedRole);
          setDbRole(cachedRole);
          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ 2 —Å–µ–∫—É–Ω–¥—ã –¥–∞–∂–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–æ–ª–∏
          setTimeout(() => {
            setLoading(false);
          }, 1000);
          return;
        }

        // –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç, –¥–µ–ª–∞–µ–º API –∑–∞–ø—Ä–æ—Å
        console.log('üîç Fetching role from API...');
        const result = await api.get<{ user: { role_id: string, roles: { name: string } } }>(`/users/check/${telegramId}`);
        
        if (result.data?.user) {
          console.log('üîç User data received:', result.data.user);
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ role_id –∏ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Ä–æ–ª—å
          if (result.data.user.role_id && result.data.user.roles) {
            const roleName = result.data.user.roles.name || '';
            console.log('‚úÖ User has role:', roleName);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            userRoleCache.setRole(telegramId, roleName);
            setDbRole(roleName);
          } else {
            console.log('‚ùå User has no role or role data is incomplete');
            setDbRole('');
          }
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
      } finally {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
        setTimeout(() => {
          setLoading(false);
        }, 2000);
      }
    };

    fetchUserRole();
  }, [api]);

  const currentUserId = telegramUser?.id || null;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∫–µ)
  const refreshRole = async () => {
    if (!telegramUser?.id) return;
    
    const telegramId = String(telegramUser.id);
    userRoleCache.clearRole(telegramId); // –û—á–∏—â–∞–µ–º –∫—ç—à
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    setLoading(true);
    try {
      const result = await api.get<{ user: { role_id: string, roles: { name: string } } }>(`/users/check/${telegramId}`);
      
      if (result.data?.user) {
        if (result.data.user.role_id && result.data.user.roles) {
          const roleName = result.data.user.roles.name || '';
          userRoleCache.setRole(telegramId, roleName);
          setDbRole(roleName);
        } else {
          setDbRole('');
        }
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏:', err);
    } finally {
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
      setTimeout(() => {
        setLoading(false);
      }, 2000);
    }
  };

  return {
    isAdmin,
    currentUserId,
    adminIds: ADMIN_TELEGRAM_IDS,
    dbRole,
    loading,
    refreshRole,
    hasContentAccess
  };
};
