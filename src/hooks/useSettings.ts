import { useState, useEffect } from 'react';
import { useApi } from './useApi';
import type { AppSetting, AppSettingsResponse } from '../types/api';

export const useSettings = () => {
  const [settings, setSettings] = useState<AppSetting[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const api = useApi();

  const fetchSettings = async () => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
      const result = await api.get<AppSettingsResponse>('/settings');
      
      if (result.error) {
        throw new Error(result.error);
      }
      
      if (result.data) {
        console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', result.data.settings);
        setSettings(result.data.settings);
      } else {
        console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ');
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', err);
      setError(err instanceof Error ? err.message : 'Failed to fetch settings');
    } finally {
      setLoading(false);
    }
  };

  const updateSetting = async (key: string, value: string, telegramId: number): Promise<boolean> => {
    try {
      console.log('üíæ –û–±–Ω–æ–≤–ª—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É:', key, '=', value);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º PUT –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
      const result = await api.put<{ success: boolean }>(`/settings/${key}`, { value }, {
        'x-telegram-id': telegramId.toString(),
      });
      
      if (result.error) {
        throw new Error(result.error);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setSettings(prev => 
        prev.map(setting => 
          setting.key === key 
            ? { ...setting, value, updated_at: new Date().toISOString() }
            : setting
        )
      );
      
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      return true;
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', err);
      setError(err instanceof Error ? err.message : 'Failed to update setting');
      return false;
    }
  };

  const getSettingValue = (key: string): string | null => {
    const setting = settings.find(s => s.key === key);
    return setting ? setting.value : null;
  };

  useEffect(() => {
    fetchSettings();
  }, []);

  return {
    settings,
    loading,
    error,
    fetchSettings,
    updateSetting,
    getSettingValue,
  };
};
