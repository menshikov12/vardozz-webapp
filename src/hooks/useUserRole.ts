import { useState, useEffect } from 'react';
import { useApi } from './useApi';
import { finalUser as telegramUser } from '../shared/lib/telegram';
import { userRoleCache } from '../shared/lib/userRoleCache';

export const useUserRole = () => {
  const [userRole, setUserRole] = useState<string>('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  const api = useApi();

  useEffect(() => {
    fetchUserRole();
  }, []);

  const fetchUserRole = async () => {
    try {
      setLoading(true);
      setError(null);

      if (!telegramUser?.id) {
        setLoading(false);
        return;
      }

      const telegramId = String(telegramUser.id);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      const cachedRole = userRoleCache.getRole(telegramId);
      if (cachedRole !== null) {
        console.log('‚úÖ useUserRole - Role loaded from cache:', cachedRole);
        setUserRole(cachedRole);
        setLoading(false);
        return;
      }

      // –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç, –¥–µ–ª–∞–µ–º API –∑–∞–ø—Ä–æ—Å
      console.log('üîç useUserRole - Fetching role from API...');
      const result = await api.get<{ user: { role_id: string, roles: { name: string } } }>(`/users/check/${telegramId}`);

      if (result.error) {
        setError(result.error);
      } else if (result.data?.user) {
        console.log('üîç useUserRole - User data received:', result.data.user);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ role_id –∏ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Ä–æ–ª—å
        if (result.data.user.role_id && result.data.user.roles) {
          const roleName = result.data.user.roles.name || '';
          console.log('‚úÖ useUserRole - User has role:', roleName);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
          userRoleCache.setRole(telegramId, roleName);
          setUserRole(roleName);
        } else {
          console.log('‚ùå useUserRole - User has no role or role data is incomplete');
          setUserRole('');
        }
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
      setError(err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    } finally {
      setLoading(false);
    }
  };

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —Ä–æ–ª—å, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –ª—é–±–∞—è —Ä–æ–ª—å –ò–õ–ò —Ä–æ–ª—å ADMIN
  const hasRole = !loading && (userRole && userRole.trim() !== '') || (userRole === 'ADMIN' || userRole === 'admin');
  
  console.log('üîç useUserRole - hasRole calculation:', { userRole, hasRole, loading });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏
  const refreshRole = async () => {
    if (!telegramUser?.id) return;
    
    const telegramId = String(telegramUser.id);
    userRoleCache.clearRole(telegramId); // –û—á–∏—â–∞–µ–º –∫—ç—à
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    await fetchUserRole();
  };

  return { userRole, hasRole, loading, error, refetch: fetchUserRole, refreshRole };
};
